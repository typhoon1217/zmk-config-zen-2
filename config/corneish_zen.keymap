/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define NAV     1
#define MOUSE   2
#define MEDIA   3
#define NUM     4
#define SYM     5
#define FUN     6
#define ADJUST  7

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bsp {
            bindings = <&kp BACKSPACE>;
            key-positions = <10 9>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
        };

        clipboard {
            bindings = <&kp LG(LA(V))>;
            key-positions = <29 28>;
        };

        undo {
            bindings = <&kp K_UNDO>;
            key-positions = <25 26>;
        };

        redo {
            bindings = <&kp K_REDO>;
            key-positions = <26 27>;
        };

        cmdcopy {
            bindings = <&kp LC(LS(C))>;
            key-positions = <26 27 36>;
        };

        cmdpaste {
            bindings = <&kp LC(LS(V))>;
            key-positions = <27 28 36>;
        };

        semiq {
            bindings = <&kp SEMI>;
            key-positions = <34 22>;
        };

        kor {
            bindings = <&none>;
            key-positions = <40 39>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&rgb_ug RGB_HUI  &kp Q       &kp W       &kp E        &kp R        &kp T        &kp Y      &kp U        &kp I            &kp O       &kp P         &rgb_ug RGB_BRI
&rgb_ug RGB_HUD  &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHFT F  &lt 7 G      &lt 6 H    &hm RSHFT J  &hm RCTRL K      &hm RALT L  &hm RGUI SQT  &rgb_ug RGB_BRD
&rgb_ug RGB_TOG  &kp Z       &kp X       &kp C        &kp V        &kp B        &kp N      &kp M        &kp COMMA        &kp DOT     &kp SLASH     &rgb_ug RGB_SAI
                                         &lt 1 ESC    &lt 2 SPACE  &lt 3 TAB    &lt 4 RET  &lt 5 BSPC   &rgb_ug RGB_SAD
            >;
        };

        inputlayer {
            bindings = <
&trans  &none     &none     &none      &none      &none     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none     &kp LANGUAGE_1        &kp RIGHT_SHIFT        &kp LCTRL         &kp SEMICOLON      &kp DQT        &trans
&trans  &none     &none     &none      &none      &none     &kp LC(X)             &kp LC(C)              &kp LC(V)         &kp INSERT         &kp BACKSPACE  &trans
                            &trans     &trans     &trans    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
            >;
        };

        nav_layer {
            bindings = <
&kp LG(TAB)             &kp LG(Q)  &kp LG(U)     &kp LG(E)     &kp LG(F)   &kp LG(T)        &kp INSERT  &kp PAGE_DOWN   &kp PG_UP     &kp HOME   &kp DEL        &trans
&kp LG(LS(LEFT_SHIFT))  &kp LGUI   &kp LALT      &kp LCTRL     &kp LSHFT   &kp LG(A)        &kp LEFT    &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp BACKSPACE  &trans
&kp LG(U)               &kp LCTRL  &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP)  &kp RG(RIGHT)    &kp LC(Z)   &kp LC(X)       &kp LC(C)     &kp LC(V)  &kp LC(Y)      &kp LG(LA(V))
                                                 &kp LC(W)     &kp LC(W)   &kp LC(T)        &mkp LCLK   &mkp RCLK       &mkp MCLK
            >;
        };

        media_layer {
            bindings = <
&trans  &none     &none     &none      &none      &none     &kp LS(R)       &kp LS(M)     &kp LS(H)        &kp LS(S)     &kp LS(V)   &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none     &kp K_PREV      &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_NEXT    &kp LS(E)   &trans
&trans  &none     &none     &none      &none      &none     &kp LS(INSERT)  &kp NUMBER_0  &kp NUMBER_1     &kp NUMBER_3  &kp C_MUTE  &kp N5
                            &trans     &trans     &trans    &kp C_PAUSE     &kp C_PP      &kp C_MUTE
            >;
        };

        num_layer {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &kp F1   &kp F2     &kp F3     &kp F4    &kp F5    &trans
&trans  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &none    &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &kp F6   &kp F7     &kp F8     &kp F9    &kp F10   &trans
                           &kp DOT  &kp N0  &kp MINUS    &kp F11  &kp F12    &trans
            >;
        };

        sym_layer {
            bindings = <
&trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC     &none   &none      &none      &none     &none     &trans
&trans  &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS     &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE     &none   &none      &none      &none     &none     &trans
                             &kp LPAR   &kp RPAR   &kp UNDER    &trans  &trans     &trans
            >;
        };

        fun_layer {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8     &kp F9     &kp PSCRN          &none   &none      &none      &none     &none     &trans
&trans  &kp F11  &kp F4  &kp F5     &kp F6     &kp SLCK           &none   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp F10  &kp F1  &kp F2     &kp F3     &kp PAUSE_BREAK    &none   &none      &none      &none     &none     &trans
                         &kp K_APP  &kp SPACE  &kp TAB            &trans  &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4         &rgb_ug RGB_TOG                   &rgb_ug RGB_EFF                    &rgb_ug RGB_HUI                    &rgb_ug RGB_SAI                    &rgb_ug RGB_BRI                  &trans
&trans  &trans        &trans         &trans         &none         &ext_power EP_TOG    &rgb_ug RGB_SPI                   &rgb_ug RGB_SPD                    &rgb_ug RGB_HUD                    &rgb_ug RGB_SAD                    &rgb_ug RGB_BRD                  &trans
&trans  &kp LG(W)     &kp LG(LC(B))  &kp LG(LA(B))  &none         &ext_power EP_ON     &rgb_ug RGB_COLOR_HSB(25,100,68)  &rgb_ug RGB_COLOR_HSB(189,100,85)  &rgb_ug RGB_COLOR_HSB(103,100,76)  &rgb_ug RGB_COLOR_HSB(302,100,69)  &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(69,85,72)
                                     &bt BT_CLR     &out OUT_USB  &out OUT_BLE         &ext_power EP_TOG                 &trans                             &trans
            >;
        };
    };
};
